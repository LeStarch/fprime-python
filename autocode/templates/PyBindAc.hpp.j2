// ======================================================================
// \title  PyBinAc.hpp
// \brief  autocode python binding header
// ======================================================================
#include <fprime-python/FprimePy/FprimePy.hpp>
{% for ns, types in namespaces.items() %}
{% for item in types %}
{% if item.header_path != "" %}
#include <{{ item.header_path }}>
{% endif %}
{% endfor %}
{% endfor %}

{% for ns, types in namespaces.items() %}
{% for item in types -%}
{% set cpp_class_name = item.ns + "::" + item.name -%}
{% if item.type == "Component" %}
namespace {{ item.ns }} {
    class __attribute__((visibility("default"))) {{ item.name }} : public {{ item.name }}ComponentBase {
      public:
        /**
         * {{ item.name }}: c++ function implementations that delegate across to the python side.
         */
        {{ item.name }}(const char* name);

        // init function loads python code
        void init({%- if item.kind != "passive" -%}const NATIVE_INT_TYPE queueDepth, {%- endif -%}const NATIVE_INT_TYPE instance);

        ~{{ item.name }}();

        {% for in_port in item.in_ports -%}
        void {{ in_port.name }}_handler({{ ",".join(in_port.arg_full_texts) }});
        {% endfor %}
        {% for command in item.commands -%}
        void {{ command.name }}_cmdHandler({{ ", ".join(command.arg_full_texts) }});
        {% endfor %}

        {% for parameter in item.parameters %}
        std::tuple<{{ parameter.data_type }}, Fw::ParamValid> paramGet_{{ parameter.name }}_helper();
        {% endfor %}
      public:
        {% if item.kind == "queued" %}
        // doDispatch binding
        using {{ item.name }}ComponentBase::doDispatch;
        {% endif %}
        // Changing access modifiers for command response
        {% if item.commands %}
        using {{ item.name }}ComponentBase::cmdResponse_out;
        {%- endif %}
        // Changing access modifiers for output ports
        {% for out_port in item.out_ports -%}
        using {{ item.name }}ComponentBase::{{ out_port.name }}_out;
        {% endfor %}
        // Changing access modifiers for output calls to channels
        {% for channel in item.channels -%}
        using {{ item.name }}ComponentBase::tlmWrite_{{ channel.name }};
        {% endfor %}
        // Changing access modifiers for output calls to events
        {% for event in item.events -%}
        using {{ item.name }}ComponentBase::log_{{ event.severity }}_{{ event.name }};
        {% endfor %}
        // Changing access modifiers for parameter calls
        {% for param in item.parameters %}
        using {{ item.name }}ComponentBase::paramGet_{{ param.name }};
        {% endfor %}

      public:
        py::object m_self;
    };
}; // Namespace {{ item.ns }}
{% endif %}
{% endfor %}
{% endfor %}
