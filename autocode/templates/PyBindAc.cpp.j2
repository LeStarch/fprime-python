// ======================================================================
// \title  PyBindAc.cpp
// \brief  autocode python binding implementation
// ======================================================================
{% if uses_string %}
#include <Fw/Types/String.hpp>
{% endif %}
{% if uses_time %}
#include <Fw/Time/Time.hpp>
{% endif %}
{% if uses_commands %}
#include <Fw/Cmd/CmdResponsePortAc.hpp>
#include <Fw/Cmd/CmdString.hpp>
{% endif %}
{% if uses_queues %}
#include <Fw/Comp/QueuedComponentBase.hpp>
{% endif %}
{% if uses_parameters %}
#include <Fw/Prm/PrmString.hpp>
#include <Fw/Prm/PrmGetPortAc.hpp>
{% endif %}
{% if uses_telemetry %}
#include <Fw/Tlm/TlmString.hpp>
{% endif %}
{% if uses_events %}
#include <Fw/Log/LogString.hpp>
{% endif %}



{% for ns, types in namespaces.items() %}
{% for item in types %}
{% if item.header_path != "" %}
#include <{{ item.header_path }}>
{%- endif -%}
{%- endfor %}
{%- endfor %}
#include <PyBindAc.hpp>

{% for ns, types in namespaces.items() %}
{% for item in types -%}
{% set cpp_class_name = item.ns + "::" + item.name -%}
{% if item.type == "Component" %}
namespace {{ item.ns }} {
    /**
     * {{ item.name }}: c++ function implementations that delegate across to the python side.
     */
    {{ item.name }} ::{{ item.name }}(const char* name) : {{ item.name }}ComponentBase(name) {}

    // init function loads python code
    void {{ item.name }} ::init({%- if item.kind != "passive" -%}const NATIVE_INT_TYPE queueDepth, {%- endif -%}const NATIVE_INT_TYPE instance) {
        py::gil_scoped_acquire acquired{};
        py::module_ module = py::module_::import("{{ item.name }}");
        this->m_self = module.attr("{{ item.name }}")();
        this->m_self.attr("_init_ac")(this);
        {{ item.name }}ComponentBase::init({%- if item.kind != "passive" -%}queueDepth, {%- endif -%}instance);
    }

    {{ item.name }} ::~{{ item.name }}() {}

    {% for in_port in item.in_ports -%}
    void {{ item.name }} ::{{ in_port.name }}_handler({{ ",".join(in_port.arg_full_texts) }}) {
        py::gil_scoped_acquire acquired{};
        m_self.attr("{{ in_port.name }}_handler")({{ functions.upcast_arguments(in_port.args) }});
    }
    {% endfor %}
    {% for command in item.commands -%}
    void {{ item.name }} ::{{ command.name }}_cmdHandler({{ ", ".join(command.arg_full_texts) }}) {
        py::gil_scoped_acquire acquired{};
        m_self.attr("{{ command.name }}_cmdHandler")({{ functions.upcast_arguments(command.args) }});
    }
    {% endfor %}
    {% for parameter in item.parameters %}
    std::tuple<{{ parameter.data_type }}, Fw::ParamValid> {{ item.name }} ::paramGet_{{ parameter.name }}_helper() {
        Fw::ParamValid status;
        {{ parameter.data_type }} value = this->paramGet_{{ parameter.name }}(status);
        return std::make_tuple(value, status);
    }
    {% endfor %}
}; // Namespace {{ item.ns }}
{% endif %}
{% endfor %}

PYBIND11_EMBEDDED_MODULE({{ ns.replace("::", ".") }}, m) {
{% if ns == "Fw"%}
    {% if uses_time %}
    py::class_<Fw::Time>(m, "Time");
    {% endif %}
    {% if uses_commands %}
    py::enum_<Fw::CommandResponse>(m, "CommandResponse")
        .value("COMMAND_OK", Fw::COMMAND_OK)
        .value("COMMAND_INVALID_OPCODE", Fw::COMMAND_INVALID_OPCODE)
        .value("COMMAND_VALIDATION_ERROR", Fw::COMMAND_VALIDATION_ERROR)
        .value("COMMAND_FORMAT_ERROR", Fw::COMMAND_FORMAT_ERROR)
        .value("COMMAND_EXECUTION_ERROR", Fw::COMMAND_EXECUTION_ERROR)
        .value("COMMAND_BUSY", Fw::COMMAND_BUSY)
        .export_values();
    {% endif %}
    {% if uses_queues %}
    py::enum_<Fw::QueuedComponentBase::MsgDispatchStatus>(m, "MsgDispatchStatus")
        .value("MSG_DISPATCH_OK", Fw::QueuedComponentBase::MSG_DISPATCH_OK)
        .value("MSG_DISPATCH_EMPTY", Fw::QueuedComponentBase::MSG_DISPATCH_EMPTY)
        .value("MSG_DISPATCH_ERROR", Fw::QueuedComponentBase::MSG_DISPATCH_ERROR)
        .value("MSG_DISPATCH_EXIT", Fw::QueuedComponentBase::MSG_DISPATCH_EXIT)
        .export_values();
    {% endif %}
    {% if uses_parameters %}
    py::enum_<Fw::ParamValid>(m, "ParamValid")
        .value("PARAM_UNINIT", Fw::PARAM_UNINIT)
        .value("PARAM_VALID", Fw::PARAM_VALID)
        .value("PARAM_INVALID", Fw::PARAM_INVALID)
        .value("PARAM_DEFAULT", Fw::PARAM_DEFAULT)
        .export_values();
    {% endif %}
{% endif %}


{% for item in types -%}
    {% set cpp_class_name = item.ns + "::" + item.name -%}
    {% if item.type == "Enum" %}
    py::class_<{{ cpp_class_name }}> _{{ item.name.lower() }}(m, "{{ item.name }}");
    _{{ item.name.lower() }}.def(py::init<>());
    _{{ item.name.lower() }}.def(py::init<{{ cpp_class_name }}::t>());
    _{{ item.name.lower() }}.def_readwrite("e", &{{ cpp_class_name }}::e);
    _{{ item.name.lower() }}.attr("NUM_CONSTANTS") = py::int_({{ cpp_class_name }}::NUM_CONSTANTS);

    py::enum_<{{ cpp_class_name }}::t>(_{{ item.name.lower() }}, "t")
        {% for val in item.vals -%}
            .value("{{ val }}", {{ item.ns }}::{{ item.name }}::{{ val }})
        {% endfor -%}
        .export_values();
    {% elif item.type == "Array" %}
    py::class_<{{ cpp_class_name }}> _{{ item.name.lower() }}(m, "{{ item.name }}");
    _{{ item.name.lower() }}.def(py::init<>());
    _{{ item.name.lower() }}.def(py::init<{{ ",".join([item.elem_type] * item.size) }}>());
    _{{ item.name.lower() }}.def("__getitem__", [](const {{ cpp_class_name }} &a, int b) {
                if (b >= {{ item.size }} ) { throw std::out_of_range("array index out of bounds"); }
                return a[b];
            }, py::is_operator());
    _{{ item.name.lower() }}.def("__setitem__", []({{ cpp_class_name }} &a, int b, {{ item.elem_type }} c) {
                if (b >= {{ item.size }} ) { throw std::out_of_range("array index out of bounds"); }
                a[b] = c;
            }, py::is_operator());
    _{{ item.name.lower() }}.attr("size") = py::int_({{ item.size }});
    {% elif item.type == "Serializable" %}
    py::class_<{{ cpp_class_name }}>(m, "{{ item.name }}")
        .def(py::init<>())
        .def(py::init<{{ ",".join(item.member_list.values()) }}>())
        {%- for name in item.member_list.keys() %}
            .def("set{{ name }}", &{{ cpp_class_name }}::set{{ name }})
            .def("get{{ name }}", &{{ cpp_class_name }}::get{{ name }})
        {%- endfor -%};
    {% elif item.type == "Component" %}
    py::class_<{{ cpp_class_name }}>(m, "{{ item.name }}")
        {%- if item.kind == "queued" -%}
        .def("doDispatch", &{{ item.ns }}::{{ item.name }}::doDispatch)
        {%- endif -%}
        {% if item.commands %}
        .def("cmdResponse_out", &{{ item.ns }}::{{ item.name }}::cmdResponse_out)
        {%- endif -%}
        {% if item.commands or items.channels or items.events or item.parameters %}
        .def("getTime", &{{ item.ns }}::{{ item.name }}::getTime)
        {%- endif -%}
        {% for out_port in item.out_ports %}
        .def("{{ out_port.name }}_out", &{{ item.ns }}::{{ item.name }}::{{ out_port.name }}_out)
        {%- endfor -%}
        {% for event in item.events %}
        .def("log_{{ event.severity }}_{{ event.name }}", &{{ item.ns }}::{{ item.name }}::log_{{ event.severity }}_{{ event.name }})
        {%- endfor -%}
        {% for channel in item.channels %}
        .def("tlmWrite_{{ channel.name }}", &{{ item.ns }}::{{ item.name }}::tlmWrite_{{ channel.name }},py::arg("arg"), py::arg("_tlmTime") = Fw::Time())
        {%- endfor -%}
        {% for param in item.parameters %}
        .def("paramGet_{{ param.name }}", &{{ item.ns }}::{{ item.name }}::paramGet_{{ param.name }}_helper)
        {%- endfor -%};
    {% elif item.type == "string" %}
    py::class_<{{ cpp_class_name }}>(m, "{{ item.name }}")
        .def(py::init<char *>())
        .def("toChar", &{{ item.ns }}::{{ item.name }}::toChar);
    {% endif %}
{% endfor %}
}
{%- endfor %}
